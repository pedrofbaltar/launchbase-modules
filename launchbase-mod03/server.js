const express = require('express') // Aqui estamos importando uma dependÃªncia, no caso o express o 'require' Ã© resposÃ¡vel por pegar arquivos externos
const nunjucks = require('nunjucks') // Importando a dependÃªncia 'nunjucks'

const server = express() // Criando o servidor
const videos = require("./data") // Chamando vÃ­deos do data.js, quando queremos chamar um arquivo que nÃ£o foi instalado pelo npm, colocamos "./" (ponto barra e nome do arquivo), "./" referencia Ã  raiz do projeto

server.use(express.static('public'))

server.set('view engine', 'njk') // Configurando template engine

nunjucks.configure('views', {
    express: server, // OpÃ§Ã£o Ã© pelo express
    autoescape: false, // Para o nunjucks nÃ£o segurar cÃ³digos HTML nas variÃ¡veis
    noCache: true
})   // Configurando     o caminho/pasta, no caso a pasta Ã© a pasta views

server.get('/', (req, res) => { // Depois que o servidor pegar a '/' vai executar uma funÃ§Ã£o, se o usuÃ¡rio enviar alguma coisa vai fazer um request (req), o servidor vai enviar uma resposta, um respond (res)
    const about = {
        avatar_url: "https://avatars0.githubusercontent.com/u/61912191?s=460&u=5664bb28b99e9285db23ce02db8ecf293a21108d&v=4",
        name: "Pedro Baltar",
        role: "Estudate - Programador",
        description: "Programador full-stack, focado em aprender cada vez mais.",
        links: [
            { name: "Github", url: "https://github.com/pedrofbaltar/" },
            { name: "Twitter", url: "https://twitter.com/baltarrpedro/" },
            { name: "LinkedIn", url: "https://github.com/pedrofbaltar/" }
        ]
    }
    return res.render('about', { about }) // por ter o mesmo nome eu posso escrever apenas uma vez mas Ã© a mesma coisa que fazer { about: about }
    // return res.render('about', { about: about }) // o servidor estÃ¡ respondendo (res) a redenrerizaÃ§Ã£o (render) de alguma view (index) -> nÃ£o precisa colocar .html pois a config jÃ¡ farÃ¡ isso
    // return res.send('Hello, world!') // o servidor estÃ¡ respondendo (res) enviando uma mensagem (send)
}) // server.get faz o server 'pegar' a rota principal ('/' = principal)

server.get('/portfolio', (req, res) => { // Fazendo a mesma coisa que fizemos com o index mas agora para o arquivo portfolio
    return res.render('portfolio', { itens: videos }) // criando uma variÃ¡vel chamada itens dentro do arquivo 'portfolio' essa variÃ¡vel se refere ao data.js que possui um array de objetos com as informaÃ§Ãµes sobre os vÃ­deos
})

server.get("/video", (req, res) => {
    const id = req.query.id 

    const video = videos.find((video) => {
        // if (video.id == id) {
        //        return true
        // }
        
        return video.id == id // Ã‰ a mesma coisa que fazer utilizando isso, Ã© apenas um jeito de deixar o cÃ³digo mais limpo
    })

    if (!video) {
        return res.send('Video not found!')
    }

    return res.render('video', { item: video })
})

server.listen(5000, () => {
    console.log('server is running ðŸš€') // callback 
}) // O servidor vai ficar ouvindo uma porta, no caso a porta 5000. E depois que 'ouvir' a porta 5000 irÃ¡ executar um callback, um resposta. No caso, farÃ¡ um console.log()